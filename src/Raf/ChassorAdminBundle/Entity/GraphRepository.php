<?php

namespace Raf\ChassorAdminBundle\Entity;

//use Doctrine\ORM\EntityRepository;
use \Doctrine\DBAL\Connection;

use Raf\ChassorCoreBundle\Entity\ChassorEnigme;
use Raf\ChassorCoreBundle\Entity\Chassor;
use Raf\ChassorCoreBundle\Entity\Enigme;

/**
 * GraphRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GraphRepository
{
    protected $conn;
    
    public function __construct(Connection $conn)
    {
        $this->conn = $conn;
    }
    
    public function findChassorEnigme()
    {
        $sql = 'select count(ce.chassor_id) y, sum(ce.valide) z, e.code x'
             . ' from chassor_enigme ce'
             . ' left join Enigme e on ce.enigme_id = e.id'
             . ' group by e.id'
             . ' order by e.code asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findChassorDate()
    {
        $sql = 'select count(c.id) y, date(last_login) x'
             . ' from Chassor c'
             . ' group by date(last_login)'
             . ' order by 2 desc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findTentativeEnigme()
    {
        $sql = 'select count(t.id) y, e.code x'
             . ' from Tentative t left join Enigme e on t.enigme_id = e.id'
             . ' group by e.id';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findTentativeChassor()
    {
        $sql = 'select count(t.id) y, concat(c.prenom, \' \', c.nom) x'
             . ' from Tentative t left join Chassor c on t.chassor_id = c.id'
             . ' group by c.id'
             . ' order by 1 desc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findTentativeJour()
    {
        $sql = 'select count(t.id) y, date(t.date) x'
             . ' from Tentative t'
             . ' group by date(t.date)'
             . ' order by 2 asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findTentativeHeure()
    {
        $sql = 'select count(t.id) y, hour(t.date) x'
             . ' from Tentative t'
             . ' group by hour(t.date)'
             . ' order by 2 asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findResoluJour()
    {
        $sql = 'select count(t.id) y, date(t.date) x'
             . ' from Tentative t'
             . ' where t.valide = 1'
             . ' group by date(t.date)'
             . ' order by 2 asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findResoluHeure()
    {
        $sql = 'select count(t.id) y, hour(t.date) x'
             . ' from Tentative t'
             . ' where t.valide = 1'
             . ' group by hour(t.date)'
             . ' order by 2 asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findInscritJour()
    {
        $sql = 'select count(t.id) y, date(t.date) x'
             . ' from Transaction t'
             . ' where t.libelle like \'Inscription%\''
             . ' group by date(t.date)'
             . ' order by 2 asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findInscritJour2()
    {
        $sql = 'select tbl.dt x, @tot := @tot + tbl.ct y'
             . ' from  (select date(t.date) dt, count(t.id) ct'
             . '       from Transaction t'
             . '       where t.libelle like \'Inscriptio%\''
             . '       group by date(t.date)'
             . '       order by t.date) tbl'
             . ' join (select @tot := 0) r'
             . ' order by tbl.dt asc';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function findMasseMonetaire()
    {
        $sql = 'select tbl.dt x, @tot := @tot + tbl.ct y'
             . ' from  (select date(t.date) dt, sum(t.montant) ct'
             . '       from Transaction t'
             . '       group by date(t.date)'
             . '       order by t.date) tbl'
             . ' join (select @tot := 0) r'
             . ' order by tbl.dt';
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

}
